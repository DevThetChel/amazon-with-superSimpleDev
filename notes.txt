1. saving data into JS
2. generate HTML
3. make add to button interactive

- after it is clicked, it add a new item into the cart, first by name and then by id
- modify it so that the quantity will be increased as we click more.
- show the cart quantity

Having the script files run in a single file can cause naming conflicts very easily. We can use module to solve this problem.

- creating a module -> creating a file, don't load the file with script.

- get a var out of a file ->

1. add type="module" attribute (this let the particular file get variables out of other files)
2. export
3. import

- always write import at the top of the file.
- always need to use live server.

- but that doesn't mean you can name more than one files the same, it will still cause naming conflict, what we achieved using module is that we now have control over where naming conflicts happen.
- to solve that, you can change the name of the var that you have imported.

- we can import everything from a file like this;
- import \* as someName from "..path".
- and you can access elements from that var like this;
- someName.cart , someName.addToCart()

- To note about radio selector is that if a set of radio selectors have the same name then we can only select one of them.

- You can't access any state from separate file, if you want to do that, you will need to use state management or save to the local storage so any file from the project has access.

- you can remove a certain element using someElement.remove().

- Don't ever forget to point specific target with ID whenever needed.

---

DayJS library

- DayJs gives a dayjs function that return values

---

Managing delivery

1. include external library which is dayjs
2. create an object for deliveryOption, in order to connect it with cart later and to reduce duplicated data in the cart.
3. Update cart adding deliveryOption for each cart item. (set a default 1 for now).
4. Updating HTML to make it dynamic. loop through the deliveryOptions obj and do necessary things.
5. make each selector checked if it matches the deliId of the selected item.
6. Update deli choice HTML for each cart item.
7. Make it interactive -> update deliOptionId in the cart after the selector is clicked (1. need to know which item we want to update. 2. need to set the deliOption for that item as the value that we clicked), and update the page (8)

Notes: When we need to update something after clicking some button or selector, the best way to do is not to use DOM and change the HTML, instead, we should update the data and regenerate all the HTML. This is called MVC(model-view-controller)

- Model -> saves and manages the data(data files)
- View -> takes the data and generate the HTML
- Controller -> runs some code when we interact with the page.
- use model to generate view, take the view and run the controller, controller will update the model, and it starts all over again.

8. and use that code to update the HTML whenever it is clicked.
9. Split the codes into 2 files (orderSummary and paymentSummary) to clean up the code. Remember to correct the file paths.
10. i wrote some messy codes before, so i needed to adjust some codes to keep the pj working(pulling the updateCartQuantity out of the function renderOrderSummary, set it as a part of renderOrderSummary, and export that )

---

skipping weekends, really awesome

function isWeekend(date) {
const dayOfWeek = date.format("dddd");
return dayOfWeek === "Saturday" || dayOfWeek === "Sunday";
}

export function calculateDeliveryDate(deliveryOption) {
// const today = dayjs();
// const deliveryDate = today.add(deliveryOption.deliveryDays, "days");

let remainingDays = deliveryOption.deliveryDays;

let deliveryDate = dayjs();
console.log(deliveryDate);

while (remainingDays > 0) {
deliveryDate = deliveryDate.add(1, "day");

    if (!isWeekend(deliveryDate)) {
      remainingDays--;
    }

}

const dateString = deliveryDate.format("dddd, MMMM D");

return dateString;
}

-----------------------------------

OOP 
- Organizing our codes into objects
- Normal coding style that we write in step-by-step instruction is called procedural programming. 

- We use OOP because it reflects the real world, you have a physical cart, you can add things to the cart and remove things from it. 

- And because you are creating the whole cart including its functions as an object, you can simply copy or inspire it to create another similar cart without needing to create it from scratch. 

- You can refer the object from inside of it using this. For example,  
cart={...
this.method or this.property
}

- In OOP, we use PascalCase for things that generate objects. 

- We used functions to generate objects and now we are gonna use classes to do that because classes are cleaner and provide more features. 

-------------------------------
Class = object generator 
- class Cart {}
- We set properties differently to an object: while we use -> cart = {
  cartItems: undefined, 
}
in an object, we use 
-> class Cart {
  cartItems = undefined; 
  (you can just write cartItems; as well)
}

- Also while we call the function directly and assign it into a var when using functions to create an object instance like: 
const cart = Cart();
we use keyword new in classes, 
const cart = new Cart();

- Unlike in functions, instead of passing parameters, we define those values needed to use in the class outside:
cart.localStorageKey = "cart-oop";
business.localStorageKey = "cart-business"

- Class features 
- Constructor - lets us run setup code after creating an object.
- Above codes: cart.localStorageKey = "cart-oop";
business.localStorageKey = "cart-business"
don't need to be written outside of the class anymore, you can add those setup codes inside of a constructor,which is a special method inside a class, it will automatically run as soon as the obj has been created. 
- constructor() {
    cart.localStorageKey = "cart-oop";
    businessCart.localStorageKey = "cart-business";
    cart.loadFromStorage();
    businessCart.loadFromStorage();
  }

- You can update them to this: 
 constructor() {
    this.localStorageKey = "cart-oop";
    this.loadFromStorage();
  }
because the class will run for every instance, so we can eliminate some steps and it is again the same as the functions in passing parameters. 
- constructor(localStorageKey) {
    this.localStorageKey = localStorageKey;
    this.loadFromStorage();
  }
- const cart = Cart("cart-oop")
- const businessCart = Cart("cart-business
)

- constructor method has to be named constructor.
- should not return anything